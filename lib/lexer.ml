# 1 "./lib/lexer.mll"
 
  exception Invalid_token

  type token = 
  | INT of int 
  | STR of string 
  | FLOAT of float 
  | BOOL of bool 
  | LBRACE 
  | RBRACE 
  | LBRACKET 
  | RBRACKET 
  | COMMA 
  | COLON 

# 18 "./lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\
    \251\255\000\000\000\000\001\000\013\000\023\000\033\000\253\255\
    \000\000\000\000\252\255\000\000\000\000\002\000";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\011\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\000\000\011\000\015\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\003\000\013\000\000\000\000\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\002\000\014\000\000\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\005\000\000\000\004\000\000\000\000\000\
    \000\000\019\000\000\000\000\000\000\000\018\000\009\000\018\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\016\000\021\000\010\000\017\000\000\000\000\000\
    \000\000\000\000\000\000\007\000\000\000\006\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\011\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\009\000\255\255\255\255\255\255\017\000\000\000\021\000\
    \255\255\255\255\255\255\255\255\019\000\255\255\255\255\255\255\
    \255\255\255\255\010\000\020\000\000\000\016\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec json lexbuf =
   __ocaml_lex_json_rec lexbuf 0
and __ocaml_lex_json_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 20 "./lib/lexer.mll"
                       i
# 130 "./lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 21 "./lib/lexer.mll"
  ( INT (int_of_string i) )
# 134 "./lib/lexer.ml"

  | 1 ->
let
# 22 "./lib/lexer.mll"
                                  f
# 140 "./lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 23 "./lib/lexer.mll"
  ( FLOAT (float_of_string f) )
# 144 "./lib/lexer.ml"

  | 2 ->
let
# 24 "./lib/lexer.mll"
                           s
# 150 "./lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 25 "./lib/lexer.mll"
  ( STR (String.sub s 1 (String.length s - 2)))
# 154 "./lib/lexer.ml"

  | 3 ->
let
# 26 "./lib/lexer.mll"
                      b
# 160 "./lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 27 "./lib/lexer.mll"
 ( BOOL (bool_of_string b) )
# 164 "./lib/lexer.ml"

  | 4 ->
# 29 "./lib/lexer.mll"
  ( json lexbuf )
# 169 "./lib/lexer.ml"

  | 5 ->
# 31 "./lib/lexer.mll"
  ( LBRACE )
# 174 "./lib/lexer.ml"

  | 6 ->
# 33 "./lib/lexer.mll"
  ( RBRACE )
# 179 "./lib/lexer.ml"

  | 7 ->
# 35 "./lib/lexer.mll"
  ( LBRACKET )
# 184 "./lib/lexer.ml"

  | 8 ->
# 37 "./lib/lexer.mll"
  ( RBRACKET )
# 189 "./lib/lexer.ml"

  | 9 ->
# 39 "./lib/lexer.mll"
  ( COMMA )
# 194 "./lib/lexer.ml"

  | 10 ->
# 41 "./lib/lexer.mll"
  ( COLON )
# 199 "./lib/lexer.ml"

  | 11 ->
# 43 "./lib/lexer.mll"
  ( raise End_of_file )
# 204 "./lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_json_rec lexbuf __ocaml_lex_state

;;

# 45 "./lib/lexer.mll"
 

  let rec lex lexbuf =
     try 
     (
      let token = json lexbuf in 
      token :: (lex lexbuf)
     )
     with 
     | End_of_file -> []
     | (Failure _) -> raise Invalid_token

  let lex_string str = str |> Lexing.from_string |> lex 
    
  let lex_file file = 
  file |> In_channel.open_text |> Lexing.from_channel |> lex 

# 229 "./lib/lexer.ml"
